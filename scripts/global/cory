#!/bin/bash

# Greetings, I'm a helpful script whose job it is
# to make running various useful commands easier :)

if [ -z $1 ]
then
    echo "You called? What would you like me to do? :)"
    echo "    Please pass a command, e.g. 'help' to get help page"
    exit 2
fi


cor_home=${TBCORHOME:-/talc/tb/testbench}
datetime=$(date +%Y%m%d_%H%M%S)

# make log storage directory, out of the way of the user
log_dir="/tmp/cocologs"
mkdir -p $log_dir

# still need to add the type and extension
logfile_base="$log_dir/$datetime"
latest_log=$log_dir/$(ls -t $log_dir | head -n 1)


# help output
function print_help {
	local base_name=$(basename $0)
    local mydir=$(cd "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)

	local c="\e[0m"  # clear colour
	local b="\e[94m"  # blue
	local bb="\e[1;94m"  # bold, blue
	local bfgb="\e[34;42m"  # blue foreground, green background (like ls dir/)
	local g="\e[32m"  # green
	local y="\e[33m"  # yellow
	local p="\e[35m"  # purple

	echo -e "Usage: $bb$base_name$c$b COMMAND [ OPTION | FLAG ]*$c"
	echo  # instead of using "\n", as it makes this fn easier to update, too
    echo -e "$bb$base_name$c$b help$c"
	echo -e "       You've just used this command to get this help message :)"
    echo
	echo -e "$bb$base_name$c$b [ run | test ] [ FLAG ]?$c"
	echo -e "       I'll move to $bb$cor_home$c and run the"\
        "( testbench | DUT test suite )"
	echo -e "    $b [ run | test ] [ -d | --display-inline ]$c $y <- default$c"
	echo -e "       Will output logs to stdout and log dir: $bb$log_dir$c"
	echo -e "    $b [ run | test ] [ -h | --hide-output ]$c"
	echo -e "       Only write logs to log dir: $bb$log_dir$c"
    echo -e "\n     e.g.$g cory run$c  <- will run the testbench"\
        "and write to logs only"
    echo -e "     Note: logs consist of both stdout and stderr from the command"
    echo
	echo -e "$bb$base_name$c$b interact$c"
	echo -e "       I'll move to $bb$cor_home$c and open the$p scapy$c"\
        "interactive terminal for you"
    echo
	echo -e "${bb}[source | .] $base_name$c$b cd [ home | logs ]?$c"
	echo -e "       Moves you to a particular directory of importance."
	echo -e "       THIS COMMAND MUST BE SOURCED TO WORK!"
    echo -e "       (also mistypes will now close your terminal :p)"
    echo -e "      $p home$c = $bfgb$cor_home$c $y <- default$c"
    echo -e "      $p logs$c = $bfgb$log_dir$c"
    echo
	echo -e "$bb$base_name$c$b logs ACTION" \
        "[ [ OPTION VAL ]* | [ OPTION* | DIR? ] ]$c"
    echo -e "       Performs an ACTION on the logs"
	echo -e "    $b logs watch [ OPTION VAL ]*$c"
	echo -e "       I'll help you watch the log outputs, as they are written"
	echo -e "    $b logs watch full$c"
	echo -e "       The full log output, everything being written, unabridged"
	echo -e "    $b logs watch short$c"
	echo -e "       Abridged output, displaying only server-summary lines"
	echo -e "    $b logs watch tail"\
        "[ [ -p | --period ] VAL | [-l | --length ] VAL ]*$c $y <- default$c"
	echo -e "       displays the last {length} lines of the unabridged logs,"
    echo -e "       updating the display every {period} seconds"
    echo -e "      $p -p (VAL: float = 0.1)$c sets period between" \
        "watch updates (in seconds)"
    echo -e "      $p -l (VAL: int = 5)$c sets length of tail output (in lines)"
	echo -e "    $b logs watch empty$c"
	echo -e "       like watching paint dry, except, there is no paint..."
	echo
    echo -e "    $b logs list [ OPTION* ]$c"
	echo -e "       lists all of your saved logs,"
    echo -e "       and you can pass OPTIONs to the$g ls$c command that is run"
    echo -e "    $b logs zip DIR$c"
	echo -e "       I will zip all of logs,"\
        "and place the zip file in a DIR of your choosing"
    echo -e "    $b logs export$c"
	echo -e "       Unfortunately I cannot export your logs,"
    echo -e "       but I can try to give you a template to do that with?"
    echo -e "    $b logs clear$c"
	echo -e "       I will delete all of your existing logs!"
	echo -e "       WARNING: this is a destructive action!"
    echo
	echo -e "$bb$base_name$c$b dump [ IFACE ]$c"
	echo -e "       dumps all network traffic flowing through IFACE" \
        "(default to tap0)"
    echo
	echo -e "$bb$base_name$c$b watch DEVNAME [ FLAG ]*$c"
	echo -e "    $b watch DEVNAME [ -l | --link ]$c"
	echo -e "       watches link details of DEVNAME device (${p}-f/-n 0.6$c)"
	echo -e "    $b watch DEVNAME [ -a | --addr | --ip-address ]$c"\
        "$y <- default$c"
	echo -e "       watches address details of DEVNAME device (${p}-f/-n 0.6$c)"
    echo
	echo -e "$bb$base_name$c$b get VARNAME$c"
	echo -e "       output just the value of certain useful variables"
    echo -e "       the available variables are:"\
        "${p}home logdir latestlog datetime$c"
    echo -e "       useful for command chaining, e.g.$g cory g ll | cory s$c"
    echo
	echo -e "$bb$base_name$c$b kill$c"
	echo -e "       indubitably kills all running testbench process"
	echo -e "       WARNING: this is a destructive action!"
    echo
	echo -e "$bb$base_name$c$b summarise LOGFILE$c"
	echo -e "       summarise an existing LOGFILE, same as stdout with"\
        "${g}cory logs short$c,"
    echo -e "       except that this also removes those CORYSUMMARY tags :)"
    echo
	echo -e "$bb$base_name$c$b advice$c"
	echo -e "       just a page with various tips on how to use cory"
	echo -e "       and how to use the talc testbench (md formatted)"
    echo  # leave encouragement option undocumented ;)
	echo -e "$bb$base_name$c$b [ v | -v | -V | --version ]$c"
	echo -e "       to support this common existence check"
    echo  # my shorthands take inspiration from iproute2's ip utility
    echo "P.S. all of my commands have shorthands, to find out what they are,"
    echo -e "please come read my source file at: $bb$mydir/cory$c :)"
}

function print_tips {
	local c="\e[0m"  # clear colour
	local b="\e[94m"  # blue
	local bb="\e[1;94m"  # bold, blue
	local bfgb="\e[34;42m"  # blue foreground, green background (like ls dir/)
	local g="\e[32m"  # green
	local y="\e[33m"  # yellow
	local p="\e[35m"  # purple
    echo -e "# Cory's tips"
    echo
    echo -e "## Cory Tips"
    echo -e "- You must run$g cory log wat [ f | s | t ]$c after$g cory run$c,"
    echo -e "  otherwise cory will track the wrong log file :}"
    echo
    echo -e "## Talc Tips"
    echo -e "- Remember to wait for the TAP device to be created before testing"
    echo -e "  (recall you can use$g cory watch DEVNAME$c to watch" \
        "its existence)"
    echo
}

function check_sourced {
    # if the specific function requires sourcing to take effect
    re="^.*(ba)?sh$"
    if ! [[ $0 =~ $re ]]
    then
        local base_name=$(basename $0)
        echo "Ahh, I'm in a subshell ($0), that command needs me to be sourced,"
        echo "       e.g. '. $base_name' or 'source $base_name'"
        exit 2
    fi
}

unrecognised_command() {
    echo "Sorry, 'cory $@' is not a command I know how to run :}"
    echo "    Try running the command 'help' to see available commands."
    exit 2
}

are_you_sure() {
    read -p "Are you sure? (yes/no) " yesno
    case $yesno in
        [Yy]* )
            echo "Very well, $@"
            ;;
        [Nn]* )
            echo "Absolutely no worries, please come back when you are sure :)"
            exit 0
            ;;
        * )
            echo "I'm not quite sure what to make of that..."
            echo "    Please answer with either yes or no."
            are_you_sure $@
            ;;
    esac
}

case $1 in
    h | -h | help | --help)
        print_help
        exit 0
        ;;
    # could collapse r and t to reduce code, but I think this is more readable
    r | run)
        cd $cor_home

        inline_output=${2:--d}
        case $inline_output in
            h | -h | --hide-output)
                MODULE=run_testbench make > $logfile_base-int.log 2>&1
                ;;
            -d | --display-inline)
                MODULE=run_testbench make | tee $logfile_base-int.log 2>&1
                ;;
            *)
                unrecognised_command "run" $inline_output
                ;;
        esac
        ;;
    t | test)
        cd $cor_home

        inline_output=${2:--d}
        case $inline_output in
            h | -h | --hide-output)
                MODULE=test_corundum make > $logfile_base-test.log 2>&1
                ;;
            -d | --display-inline)
                MODULE=test_corundum make | tee $logfile_base-test.log 2>&1
                ;;
            *)
                unrecognised_command "test" $inline_output
                ;;
        esac
        ;;
    i | int | interact | interactive)
        cd $cor_home
        python -m scapy
        ;;
    c | cd | travel | teleport)
        check_sourced
        dest=${2:-wherever}
        case $dest in
            h | home)
                cd $cor_home
                ;;
            l | logs)
                cd $log_dir
                ;;
            wherever)
                # should only be triggered if cd but $2 is unset
                echo "cory go home"
                cd $cor_home
                ;;
            *)
                unrecognised_command "cd" $2
                ;;
        esac
        ;;
    l | log | logs)
        log_action=${2:-ls}

        case $log_action in
            w | wat | watch)
                log_type=${3:-full}

                case $log_type in
                    f | full)
                        tail -f $latest_log
                        ;;
                    s | short | summary | servers)
                        # I don't rm the tag here, so there's less processing,
                        # as this is realtime
                        tail -f $latest_log | grep --colour=never "<CORYSUMMARY>"
                        ;;
                    t | tail)
                        vals=(0.1 5)  # default values for command
                        opt_val=0
                        for opt in ${@:3}
                        do
                            if [ $opt_val == 0 ]
                            then
                                # Note: I don't accept -n for either,
                                # as it might be confusing to assign it
                                # to only one of watch/tail
                                case $opt in
                                    -p | --period)
                                        opt_val=1
                                        ;;
                                    -l | --length)
                                        opt_val=2
                                        ;;
                                    *)
                                        unrecognised_command "logs" "watch" \
                                            "tail" $opt
                                        ;;
                                esac
                            else
                                vals[$opt_val]=$opt
                            fi
                        done
                        watch -n ${vals[0]} tail -n ${vals[1]} $latest_log
                        ;;
                    e | empty)
                        echo "I have no idea why you would" \
                            "select this option..."
                        echo "Welcome to /dev/null/:"
                        tail -f /dev/null
                        ;;
                    *)
                        unrecognised_command "logs" "watch" $log_type
                        ;;
                esac
                ;;
            l | ls | list)
                ls -t  ${@:3} $log_dir
                ;;
            z | zip)
                ziploc=${3:-$cor_home}
                zip -r $ziploc/cocologs $log_dir/*
                echo "logs zipped to $ziploc/cocologs.zip, in order to" \
                    "export these, run this from outside the container:"
                echo -e "\n    docker cp <cont_name>:$ziploc/cocologs.zip" \
                    "<dest_dir>\n"
                ;;
            e | exp | export)
                echo "Unfortunately that's not a command I can run for you"
                echo "You need to run this command from outside the container:"
                echo -e "\n    docker cp <cont_name>:$log_dir <dest_dir>\n"
                ;;
            clear)
                are_you_sure "clearing all log files"
                rm $log_dir/*
                ;;
            *)
                unrecognised_command "logs" $log_action
                ;;
        esac
        ;;
    d | dump)
        iface=${2:-tap0}
        tcpdump -i $iface -X -v
        ;;
    w | wat | watch)
        devname=${2:-tap0}
        if [[ $devname == -* ]]
        then
            echo "Sorry, to me '$devname' looks like a flag not a device name"
            echo "    The correct syntax is 'watch [ DEVNAME [ FLAG ] ]'"
            exit 2
        fi

        flag=${3:-default}
        case $flag in
            -l | --link)
                watch -n 0.6 ip link show $devname
                ;;
            -a | --addr | --address | --ip-address)
                watch -n 0.6 ip addr show $devname
                ;;
            default)
                # should only be triggered if dev but $3 is unset
                echo "cory watch $devname's addresses"
                watch -n 0.6 ip addr show $devname
                ;;
            *)
                unrecognised_command "watch" $devname ${@:3}
                ;;
        esac
        ;;
    g | get)
        if [ -z $2 ]
        then
            echo "Hiya, what would you like me to get for you? :)"
            echo "Here is a list of the variables I can output the values of:"
            echo -e "    home      = $cor_home"
            echo -e "    logdir    = $log_dir"
            echo -e "    latestlog = $latest_log"
            echo -e "    datetime  = $datetime"
            exit 2
        fi
        case $2 in
            # just output what's needed, in case being used for other commands
            h | home | w | wd | workdir)
                echo "$cor_home"
                ;;
            ld | logdir | logsdir)
                echo "$log_dir"
                ;;
            ll | latestlog)
                echo "$latest_log"
                ;;
            d | dt | datetime)
                echo "$datetime"
                ;;
            *)
                unrecognised_command "get" $2
                ;;
        esac
        ;;
    kill)
        echo "These are the processes that I will kill:"
        ps -e | grep -E "make|vvp"
        are_you_sure "killing processes..."
        kill -9 $(ps -e | grep -E "make|vvp" | awk '{print $1}' | tr '\n' ' ')
        # sends SIGKILL signals to all make and vvp processes in the container
        ;;
    s | summ | summarise)
        file=${2:-$latest_log}
        # use sed to remove the tag, cos it's cleaner like that :)
        grep "<CORYSUMMARY>" $file | sed "s/<CORYSUMMARY> //"
        ;;
    a | advise | advice)
        print_tips
        ;;
    v | -v | -V | --version)
        # just to support this, as if I were a real CLI utility... alas
        echo "Hi, I'm cory, version 0.8.0 (this number was arbitrarily chosen)"
        exit 0
        ;;
    e | encourage | encouragement)
        # idk, if the work becomes too gruelling
        echo "You got this! (૭ ｡•̀ ᵕ •́｡ )૭"
        ;;
    *)
        unrecognised_command $1
        ;;
esac
